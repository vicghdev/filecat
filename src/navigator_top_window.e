note
	description: "EiffelVision Widget NAVIGATOR_TOP_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	generator: "EiffelBuild"
	date: "$Date: 2010-12-22 10:39:24 -0800 (Wed, 22 Dec 2010) $"
	revision: "$Revision: 85202 $"

class NAVIGATOR_TOP_WINDOW inherit NAVIGATOR_TOP_WINDOW_IMP

feature {NONE} -- data members
	dir_tree_ui: UI_DIR_TREE
	file_list_ui: UI_PATH_LIST
	categorizer: FILE_CATEGORIZER

feature {NONE} -- Initialization

	user_create_interface_objects
			-- Create any auxilliary objects needed for NAVIGATOR_TOP_WINDOW.
			-- Initialization for these objects must be performed in `user_initialization'.
		do
				-- Create attached types defined in class here, initialize them in `user_initialization'.
				create dir_tree_ui.make ("\temp", dir_tree)
				create file_list_ui.make (file_list)
				create categorizer.make
		end

	user_initialization
			-- Perform any initialization on objects created by `user_create_interface_objects'
			-- and from within current class itself.
		do
				-- Initialize types defined in current class
				dir_tree.select_actions.extend (agent dir_tree_item_selected)
				file_list.select_actions.extend (agent file_selected)
				file_list.enable_multiple_selection
				--file_list.set_drag_and_drop_mode
				dir_tree.drop_actions.extend (agent dropProva(?))
				dir_tree.drop_actions.extend (agent dropListProva(?))
				SetupCategorizer
		end

feature {NONE} -- Implementation

	path_menu_item_selected (an_item: EV_MENU_ITEM)
			-- Called by `item_select_actions' of `l_ev_menu_bar_1'.
		do
			dir_tree_ui.filldir
			-- just for testing, showing the category as a flat list
			file_list_ui.listmulti (categorizer.top_categories)
		end

	dir_tree_item_selected --(an_item: EV_TREE_NODE)
		do
			file_list_ui.listfiles (dirTreeSelectedStr)
		end

	file_selected
		local
			f: EV_LIST_ITEM
			anded_cats: ARRAYED_LIST[STRING]
		do
			f := file_list.selected_item
			if attached f then
				file_list.set_pebble (f.text)
			end

			if file_list.selected_items.count > 1 then
			create anded_cats.make (2)
				anded_cats.extend ("Admin")
				anded_cats.extend ("Audio")
				file_list.set_pebble (anded_cats)
			end
		end

	dropProva( str: STRING_32)
		do
			file_list_ui.listfile (str)
		end

	dropListProva( strlist: LIST[STRING])
		do
			file_list_ui.listfile (strlist.at (1))
		end

	--helpers
	dirTreeSelectedStr : STRING
		local
			n: detachable EV_TREE_NODE
		do
			n := dir_tree.selected_item
			if attached n then
				Result := n.text
			else
				Result := ""   --error?
			end

		end

	SetupCategorizer --just for testing
		do
			-- Add files
			categorizer.add_file ("File1")
			categorizer.add_file ("File2")
			categorizer.add_file ("File3")
			categorizer.add_file ("File4")
			-- Add categories
			categorizer.add_TopCategory ("Admin")
			categorizer.add_TopCategory ("Media")
			categorizer.add_Subcategory ("Docs", "Admin")
			categorizer.add_Subcategory ("Audio", "Media")
			categorizer.add_Subcategory ("Video", "Media")
			categorizer.add_Subcategory ("Music", "Audio")
			-- Add associations
			categorizer.add_link ("File1", "Docs")
			categorizer.add_link ("File1", "Audio")
			categorizer.add_link ("File2", "Audio")
			categorizer.add_link ("File2", "Music")
			categorizer.add_link ("File3", "Music")
			categorizer.add_link ("File4", "Audio")
			--tfcm.del_link ("File1", "Audio")
			--tfcm.del_link ("File1", "Docs")
		end

end
